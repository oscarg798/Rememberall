plugins {
    id "com.android.application"
    id "kotlin-android"
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
}
apply plugin: 'kotlin-android'
apply from: "../ktlint.gradle"
apply from: "../signin.gradle"
apply from: "../config.gradle"

android {

    compileSdk = 31
    buildToolsVersion = "31.0.0"

    defaultConfig {
        applicationId = "com.oscarg798.remembrall"
        minSdk = 26
        targetSdk = 31
        versionCode = 1
        versionName = "1.0"

        buildConfigField "String", "GoogleClientId", "\"$googleCLientId\""

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"]
            }
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.locker
        }
        release {
            signingConfig signingConfigs.locker
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        freeCompilerArgs = ["-Xallow-result-return-type",
                            "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                            "-Xopt-in=androidx.compose.foundation.ExperimentalFoundationApi",
                            "-Xopt-in=androidx.compose.ui.ExperimentalComposeUiApi",
                            "-Xopt-in=androidx.compose.material3.ExperimentalMaterial3Api",
                            "-Xopt-in=kotlinx.coroutines.FlowPreview",
                            "-Xopt-in=kotlin.contracts.ExperimentalContracts"]
        jvmTarget = "1.8"
    }

    testOptions {
        //execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources true
        }
    }

    buildFeatures {
        viewBinding false
        dataBinding false
        compose true
    }

    composeOptions {
        kotlinCompilerVersion "1.6.0"
        kotlinCompilerExtensionVersion '1.1.0-rc01'
    }

    repositories {
        google()
        jcenter {
            content {
                includeModule("org.jetbrains.kotlinx", "kotlinx-collections-immutable-jvm")
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/gradle/incremental.annotation.processors'
    }
}

dependencies {

    implementation libs.androidx.coreKtx
    implementation libs.androidx.appcompat
    implementation libs.androix.activityx
    implementation libs.material

    implementation libs.androidx.constraintLayout
    testImplementation libs.junit.base
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.espresso.core

    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

    implementation libs.androidx.navigation.compose

    implementation libs.lottie.main
    implementation libs.lottie.compose

    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
    kapt libs.androidx.room.compiler

    implementation libs.hilt.android
    implementation libs.hilt.compose
    implementation libs.hilt.work
    implementation libs.hilt.compiler
    implementation libs.hilt.dagger.compiler
    kapt(libs.hilt.dagger.compiler)
    kapt libs.hilt.compiler
    kaptAndroidTest(libs.hilt.dagger.compiler)

    implementation libs.arrow.core

    implementation libs.workManager.ktx

    implementation libs.compose.dialogs

    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.6.0'
    implementation libs.android.gms.auth
    implementation platform(libs.firebase.boom)

    implementation project(path: ':common-ui')
    implementation project(path: ':common')
    implementation project(path: ':common-auth')
    implementation project(path: ':task-list')
    implementation project(path: ':common-gettask')
    implementation project(path: ':task-detail')
    implementation project(path: ':common_calendar')
    implementation project(path: ':common-schedule')
    implementation project(path: ':profile')
    implementation project(path: ':splash')
    implementation project(path: ':common-addedit')
    implementation project(path: ':common-task')
    implementation project(path: ':task-edit')
    implementation project(path: ':task-add')
    implementation project(path: ':login')
    implementation project(path: ':home')
    implementation project(path: ':checklist-list')
    implementation project(path: ':checklist-add')
    implementation project(path: ':checklist-detail')
    implementation project(path: ':common-checklist')

    implementation libs.accompanist.pager
    implementation libs.accompanist.pagerIndicator

    implementation platform(libs.firebase.boom)
    implementation libs.firebase.analytics
    implementation libs.firebase.firestore
    implementation "io.grpc:grpc-okhttp:1.32.2"
    implementation libs.firebase.auth

    testImplementation libs.mockk.base
    testImplementation libs.coroutines.test

}
repositories {
    google()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

def googleServices = file("google-services.json")

if (!googleServices.exists()) {
    // If there isn't a google-services.json available, we'll copy our fake version to the
    // google-services.json
    Files.copy(file("fake-services.json").toPath(), googleServices.toPath())
}
